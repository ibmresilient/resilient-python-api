language: python
python: 3.11
os: linux
dist: xenial

git:
  depth: false

stages:
  - name: run tests
    if: branch !~ ^pages\/.+
  - name: sonarqube and detect secrets scan
    if: branch !~ ^pages\/.+
  - name: build packages
    if: branch = master OR branch =~ ^release\/.+
  - name: deploy to artifactory
    if: type != cron AND (branch =~ ^release\/.+ OR branch = master)
  - name: deploy documentation
    if: type != cron AND ( branch =~ ^pages\/.+ OR branch =~ ^release\/.+ OR branch = master )
  - name: release to pypi and quay
    if: tag =~ ^release\/pypi\/.+
  - name: sync public repo
    if: tag =~ ^release\/pypi\/.+

env:
  global:
  - ARTIFACTORY_BASE_URL=https://na.artifactory.swg-devops.com/artifactory
  - ARTIFACTORY_REPO_URL=$ARTIFACTORY_BASE_URL/sec-resilient-team-integrations-generic-local/resilient-python-api
  - ARTIFACTORY_COV_LOCATION=$ARTIFACTORY_REPO_URL/coverage/$TRAVIS_BUILD_NUMBER

  - TEST_RESILIENT_APPLIANCE=staging2.internal.resilientsystems.com
  - OCTOKIT_API_ENDPOINT="https://github.ibm.com/api/v3/"

  - LATEST_TAG=$(git describe --abbrev=0 --tags)
  - IS_MASTER=$([[ "$TRAVIS_BRANCH" != *"master"* ]]; echo $?)
  - IS_RELEASE=$([[ "$TRAVIS_BRANCH" != *"release/"* ]]; echo $?)
  - LIB_VERSION=`if [[ $IS_RELEASE -eq 1 ]]; then echo $(echo ${TRAVIS_BRANCH##*/} | cut -d "." -f 1,2,3,4); else echo $(echo $LATEST_TAG | cut -d "." -f 1,2,3,4); fi`
  - NEW_VERSION=$LIB_VERSION.$TRAVIS_BUILD_NUMBER
  - SETUPTOOLS_SCM_PRETEND_VERSION=$NEW_VERSION
  - ARTIFACTORY_LIB_LOCATION=$ARTIFACTORY_REPO_URL/$LIB_VERSION/$NEW_VERSION

  - RUN_INT_TESTS_KEYWORD="[run-int-tests]"
  - RUN_INT_TESTS=$([[ "$TRAVIS_COMMIT_MESSAGE" != *"$RUN_INT_TESTS_KEYWORD"* ]]; echo $?)

  - SKIP_SCANS_KEYWORD="[skip-scans]"
  - SKIP_SCANS=$([[ "$TRAVIS_COMMIT_MESSAGE" != *"$SKIP_SCANS_KEYWORD"* ]]; echo $?)

  - FYRE_CLUSTER_NAME="${TRAVIS_BUILD_NUMBER}hydratest"
  - FYRE_CLUSTER_DOMAIN="${FYRE_CLUSTER_NAME}1.fyre.ibm.com"
  - FYRE_DEPLOY_SLEEP_SECONDS=90
  - FYRE_DEPLOY_TIMEOUT_SECONDS=540

  - PATH_SCRIPTS_DIR="$TRAVIS_BUILD_DIR/travis-scripts"
  - PATH_COMMON_SCRIPTS_DIR="$TRAVIS_BUILD_DIR/common_scripts"
  - PATH_MOCK_APP_CONFIG="$TRAVIS_BUILD_DIR/travis-scripts/mock_app_config"
  - PATH_TEMPLATE_PYPIRC="$TRAVIS_BUILD_DIR/travis-scripts/template.pypirc"
  - PATH_SONAR_PROPERTIES="$TRAVIS_BUILD_DIR/sonar-project.properties"
  - PATH_COV_SAVE_LOC="coverage_reports"

  - PAGES_INTERNAL_LINK="https://pages.github.ibm.com/Resilient/resilient-python-api/"
  - PAGES_PUBLIC_LINK="https://ibm.biz/soar-python-docs"

  - SONAR_SCANNER_CLI_URL="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli"
  - SONAR_SCANNER_CLI_FILENAME="sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
  - SONAR_QUBE_URL="https://sonarqube.secintel.intranet.ibm.com"

  - DOCKER_IMAGE_NAME="soarapps-base-docker-image"

# Install package deps
before_install:
  - pip install -U pip setuptools requests retry2
  - $PATH_SCRIPTS_DIR/download_common_scripts.sh "$PATH_COMMON_SCRIPTS_DIR" "$GH_PATH_COMMON_SCRIPTS_REPO"

notifications:
  slack:
    rooms:
      - secure: "BGKGt6vf+dmhGSchcrPuiexuZS8Ajz6x2kWHLGtAExf3Sx5pRb8KKVnL64GaglYWHplBela1XjGwE8g+8vLufsgAjtAeglWdEEMN/I/I8pQlKy/SZuFv9MSBR1WiM0DU+Xc0w2tFm6tvY73sDtnIRbT9Sjc3mJ6fmUAr4dg5BQ0SaqLQYF8f5G2RDP4B3MHIZAncYKj4WK/7VqizBxXWgs9R2caPkQLmfXjc2qvK1uYE9BDWRYs5lBeZkMLcv6rZV9Ra91wF4vUy8tNfwPmbTuc82PEx6LgJ+D6WdUWSZfEXyNc/FKRDKBaDYSXdHKmh9YQJAISpl8odDcaJOVoImZBtf+GfvHgdrUgfrE0mXyGhW54sUWxMWHkiBNk3BgkszOvWctknyjEfMlmuU/xaWUuJ1Oxj379RbtDlaZpbnoe8oxHyStGryGTkYc74OrUbttFWPZq1WD7qg70WfiHKhmmXiw+7BV9+vgPcvGf5F9pXpd+2kKCDClT1R6YEu3cePnkjyiIekUaqP052B3AFwUWfv8hWKXMp18Apgnh4+ZMtLaIqKBn6FwieTvNxPuKioa10T6g92ZlpKZYsOQUvJpaeaifC5Vf8g5uwepWaR0Xnci1h579BNvibZfPqg4UUS1LOtw8N6ZqQsnmEJfz5GZDT5g2C9Am+ezZ6XmJE04I="
    on_success: never
    on_failure: always


matrix:
  fast_finish: true

  include:
    - stage: run tests
      name: Python 3.9 Unit Tests
      python: 3.9.18
      env: RUN_TYPE=unit_test TOXENV=py39 TEST_RESILIENT_ORG="Resilient PS - Test2"
      install:
        - $PATH_SCRIPTS_DIR/install_unit_tests_deps.sh
      script:
        - echo "Starting Python 3.9 Tests"
        - $PATH_SCRIPTS_DIR/run_unit_tests.sh

    - stage: run tests
      name: Python 3.11 Unit Tests
      python: 3.11
      env: RUN_TYPE=unit_test TOXENV=py311 TEST_RESILIENT_ORG="Resilient PS - Test2"
      install:
        - $PATH_SCRIPTS_DIR/install_unit_tests_deps.sh
      script:
        - echo "Starting Python 3.11 Tests"
        - $PATH_SCRIPTS_DIR/run_unit_tests.sh
        - >
          python $PATH_COMMON_SCRIPTS_DIR/manage_artifactory.py "UPLOAD" "$ARTIFACTORY_COV_LOCATION"
          --upload-files
          "$TRAVIS_BUILD_DIR/resilient/cov_resilient.xml"
          "$TRAVIS_BUILD_DIR/resilient-lib/cov_resilient_lib.xml"
          "$TRAVIS_BUILD_DIR/resilient-circuits/cov_resilient_circuits.xml"
          "$TRAVIS_BUILD_DIR/resilient-sdk/cov_resilient_sdk.xml"

    - stage: run tests
      name: Python 3.12 Unit Tests
      python: 3.12
      env: RUN_TYPE=unit_test TOXENV=py312 TEST_RESILIENT_ORG="Resilient PS - Test2"
      install:
        - $PATH_SCRIPTS_DIR/install_unit_tests_deps.sh
      script:
        - echo "Starting Python 3.12 Tests"
        - $PATH_SCRIPTS_DIR/run_unit_tests.sh

    - stage: run tests
      name: Python 3.11 Integration Tests
      python: 3.11
      env: RUN_TYPE=int_test TOXENV=py311
      install: $PATH_SCRIPTS_DIR/install_int_tests_deps.sh
      script:
        - if [ $RUN_INT_TESTS == 1 ]; then
            $PATH_SCRIPTS_DIR/manage_fyre_instance.sh DEPLOY $FYRE_STENCIL_ID $FYRE_CLUSTER_NAME $FYRE_CLUSTER_DOMAIN $FYRE_DEPLOY_SLEEP_SECONDS $FYRE_DEPLOY_TIMEOUT_SECONDS;
            $PATH_SCRIPTS_DIR/run_int_tests.sh;
          fi
      after_script:
        - if [ $RUN_INT_TESTS == 1 ]; then
            $PATH_SCRIPTS_DIR/manage_fyre_instance.sh DELETE $FYRE_CLUSTER_NAME;
          fi

    - stage: sonarqube and detect secrets scan
      name: SonarQube Scan
      language: java
      env: RUN_TYPE=sonarqube
      install:
        - wget "$SONAR_SCANNER_CLI_URL/$SONAR_SCANNER_CLI_FILENAME"
        - unzip $SONAR_SCANNER_CLI_FILENAME -d /tmp
      script:
        - echo "Installing and running SonarQube scan"
        - $PATH_COMMON_SCRIPTS_DIR/run_sonar_scanner.sh "PYTHON_LIBRARIES" "$PATH_COMMON_SCRIPTS_DIR" 0 1
      after_script:
        - python $PATH_COMMON_SCRIPTS_DIR/manage_artifactory.py "DELETE" "$ARTIFACTORY_COV_LOCATION"

    - stage: build packages
      name: Build Packages in Python 3.11
      install:
        - pip install twine build
      script:
        - echo "Building packages in Python 3.11"
        - $PATH_SCRIPTS_DIR/build_and_deploy_packages.sh no_deploy

    - stage: sonarqube and detect secrets scan
      name: Detect Secrets Scan
      services:
        - docker
      env:
        - RUN_TYPE=validate
      script:
        - echo "Detect secrets scan"
        - $PATH_COMMON_SCRIPTS_DIR/detect_secrets_scan.sh
      on:
        all_branches: true

    - stage: deploy to artifactory
      name: Deploy packages to Artifactory
      install:
        - pip install twine build
      script:
        - echo "Building packages in Python 3.11 and Deploying to Artifactory"
        - $PATH_SCRIPTS_DIR/build_and_deploy_packages.sh do_deploy
        - echo "Sending notification to Slack"
        - PARSED_VERSION=$(echo $NEW_VERSION | cut -d "v" -f 2)
        - $PATH_COMMON_SCRIPTS_DIR/send_slack_notification.sh "Link to Artifactory - <$ARTIFACTORY_LIB_LOCATION|$NEW_VERSION> \n Install command - \`\`\`pip install -U <package-name>==$PARSED_VERSION -i https://<EMAIL_ADDRESS>:<ARTIFACTORY_ACCESS_TOKEN>@na.artifactory.swg-devops.com/artifactory/api/pypi/sec-resilient-team-integrations-pypi-virtual/simple\`\`\` " "success"

    - stage: deploy to artifactory
      name: Deploy Docker base image to Artifactory
      services:
        - docker
      install:
        - pip install jinja2
        - echo "${ARTIFACTORY_API_TOKEN}" | docker login --password-stdin --username "${ARTIFACTORY_USERNAME}" ${ARTIFACTORY_DOCKER_REGISTRY_BASE_NAME}
      script:
        - echo "Building Docker base image and pushing to Artifactory"
        - $PATH_SCRIPTS_DIR/build_and_deploy_docker_base_image.sh "${ARTIFACTORY_DOCKER_REGISTRY_BASE_NAME}/${ARTIFACTORY_DOCKER_REPO_NAME}" "${NEW_VERSION}"
        - echo "Installing and running Twistlock scan"
        - $PATH_COMMON_SCRIPTS_DIR/run_twistlock.sh "$DOCKER_IMAGE_NAME" "$TRAVIS_BUILD_DIR" "None" "$PATH_COMMON_SCRIPTS_DIR"

    - stage: release to pypi and quay
      name: Release packages to PyPi
      install:
        - pip install twine build
      script:
        - echo "Building packages in Python 3.9 and releasing to PyPi"
        - $PATH_SCRIPTS_DIR/build_and_deploy_packages.sh no_deploy do_release
        - echo "Sending notification to Slack"
        - $PATH_COMMON_SCRIPTS_DIR/send_slack_notification.sh "Successfully released $NEW_VERSION to PyPi" "success"

    - stage: release to pypi and quay
      name: Deploy Docker base image to Quay.io
      services:
        - docker
      before_install:
        - echo "${QUAY_PASSWORD}" | docker login --password-stdin --username "${QUAY_USERNAME}" "${QUAY_DOCKER_REGISTRY_BASE_NAME}"
      script:
        - echo "Building Docker base image and pushing to Quay"
        - $PATH_SCRIPTS_DIR/build_and_deploy_docker_base_image.sh "${QUAY_DOCKER_REGISTRY_BASE_NAME}" "${NEW_VERSION}"

    - stage: deploy documentation
      install:
      - pip install sphinx furo sphinx-copybutton build
      script:
        - echo "Building packages in Python 3.9 and deploying Documentation internally too"
        - $PATH_SCRIPTS_DIR/build_and_deploy_packages.sh no_deploy no_release deploy_docs
      deploy:
        - provider: pages:git
          github_url: github.ibm.com
          github_token: $GITHUB_AUTH_TOKEN
          target_branch: gh-pages
          skip_cleanup: true
          on:
            all_branches: true
            condition: $TRAVIS_BRANCH =~ ^(pages\/.+|release\/.+|master)
          local_dir: ./docs/_build/
          keep_history: true
          verbose: true
          edge:
            branch: v2.0.3-beta.4
      after_deploy:
        - $PATH_COMMON_SCRIPTS_DIR/send_slack_notification.sh "INTERNAL Docs for $NEW_VERSION have been published and are available at <$PAGES_INTERNAL_LINK|$PAGES_INTERNAL_LINK>" "success";

    - stage: sync public repo
      script:
        - echo "Syncing INTERNAL repo with PUBLIC repo"
        - $PATH_SCRIPTS_DIR/sync_public_repo.sh "ALL"
      after_success:
        - $PATH_COMMON_SCRIPTS_DIR/send_slack_notification.sh "PUBLIC Docs for $NEW_VERSION have been published and are available at <$PAGES_PUBLIC_LINK|$PAGES_PUBLIC_LINK>" "success";

after_failure:
  - $PATH_SCRIPTS_DIR/download_common_scripts.sh "$PATH_COMMON_SCRIPTS_DIR" "$GH_PATH_COMMON_SCRIPTS_REPO"
  - python $PATH_COMMON_SCRIPTS_DIR/manage_artifactory.py "DELETE" "$ARTIFACTORY_COV_LOCATION"
